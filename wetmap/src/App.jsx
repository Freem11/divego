import './App.scss';
import { useState, useEffect, useContext } from 'react';
import AuthenticationPage from './components/authentication';
import LoadingScreen from './LoadingScreen';
import { getMostRecentPhoto } from './supabaseCalls/photoSupabaseCalls';

import { toast, ToastContainer } from 'react-toastify';
import Router from './router';
import { MapContext } from './components/googleMap/mapContext';
import { UserProfileContext } from './components/contexts/userProfileContext';
// DiveLocker

function App() {
  const { setInitialPoint } = useContext(MapContext);
  const [appIsReady, setAppIsReady] = useState(false);
  const { initProfile, profile, profileInitialized } = useContext(UserProfileContext);

  useEffect(() => {
    initProfile();
  }, []);

  useEffect(() => {
    (async () => {
      const photoLocation = await getMostRecentPhoto();
      if (photoLocation) {
        setInitialPoint([photoLocation[0].latitude, photoLocation[0].longitude]);
        setAppIsReady(true);
      }
    })();
  }, []);


  useEffect(() => {
    // This kind of urls are generated by authentication provider(eg. password reset functionality)
    // https://localhost:3000/#error=access_denied&error_code=otp_expired&error_description=Email+link+is+invalid+or+has+expired
    const urlParams = new URLSearchParams(window.location.hash);
    if (urlParams.get('error_code')) {
      setTimeout(() => {
        toast.error('This link is invalid or has expired. Please try again.');
      }, 1000);
    }
  }, []);

  if (!appIsReady || !profileInitialized) {
    return <LoadingScreen />;
  }

  return (
    <div className="App">
      <ToastContainer autoClose={10000} />
      { !profile ? <AuthenticationPage /> : <Router /> }
    </div>
  );
}

export default App;
